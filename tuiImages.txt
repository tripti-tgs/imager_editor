import React, { useEffect, useRef, useState } from "react";
import ImageEditor from "tui-image-editor";
import "tui-image-editor/dist/tui-image-editor.css";
import img from "../images/XZHPZ.jpg";
import axios from "axios";
interface ImageEditorComponentProps {}

const myTheme = {
  "common.bisize.width": "251px",
  "common.bisize.height": "21px",
  "common.backgroundImage": "none",
  "common.backgroundColor": "#fff",
  "common.border": "1px solid #c1c1c1",

  // header
  "header.backgroundImage": "none",
  "header.backgroundColor": "#fff",
  "header.border": "0px",
  "header.textAlign": "center",
  // Shape icons
  // "menu.normalIcon.path": "https://www.svgrepo.com/show/89931/stars.svg",
  // "menu.activeIcon.path": "https://www.svgrepo.com/show/89931/stars.svg",

  // load button
  "loadButton.backgroundColor": "#000",
  "loadButton.border": "1px solid #ddd",
  "loadButton.color": "#222",
  "loadButton.fontFamily": "NotoSans, sans-serif",
  "loadButton.fontSize": "12px",
  "loadButton.visibility": "hidden",

  // download button
  "downloadButton.backgroundColor": "#000",
  "downloadButton.border": "1px solid #000",
  "downloadButton.color": "#fff",
  "downloadButton.fontFamily": "NotoSans, sans-serif",
  "downloadButton.fontSize": "12px",

  // main icons
  "menu.normalIcon.color": "#858585",
  "menu.activeIcon.color": "#555555",
  "menu.disabledIcon.color": "#434343",
  "menu.hoverIcon.color": "#e9e9e9",
  "menu.iconSize.width": "24px",
  "menu.iconSize.height": "24px",

  // submenu primary color
  "submenu.backgroundColor": "#fff",
  "submenu.partition.color": "#e5e5e5",

  // submenu labels
  "submenu.normalLabel.color": "#858585",
  "submenu.normalLabel.fontWeight": "normal",
  "submenu.activeLabel.color": "#000",
  "submenu.activeLabel.fontWeight": "normal",
  // checkbox style
  "checkbox.border": "1px solid #ccc",
  "checkbox.backgroundColor": "#fff",

  // range style
  "range.pointer.color": "#333",
  "range.bar.color": "#ccc",
  "range.subbar.color": "#606060",

  "range.disabledPointer.color": "#d3d3d3",
  "range.disabledBar.color": "rgba(85,85,85,0.06)",
  "range.disabledSubbar.color": "rgba(51,51,51,0.2)",

  "range.value.color": "#000",
  "range.value.fontWeight": "normal",
  "range.value.fontSize": "11px",
  "range.value.border": "0",
  "range.value.backgroundColor": "#f5f5f5",
  "range.title.color": "#000",
  "range.title.fontWeight": "lighter",

  // colorpicker style
  "colorpicker.button.border": "0px",
  "colorpicker.title.color": "#000",
};

const TuiImageEditorComponent: React.FC<ImageEditorComponentProps> = () => {
  const editorRef = useRef<HTMLDivElement>(null);
  const editorInstanceRef = useRef<any>(null);
  const [imageLoaded, setImageLoaded] = useState<boolean>(false);
  const [imageInfo, setImageInfo] = useState<any>(null);
  const [imageList, setImages] = useState<any>([]);
  const [imageURl,setImageURL] =useState<any>(img);

  useEffect(() => {
    const initializeEditor = () => {
      if (editorRef.current) {
        editorInstanceRef.current = new ImageEditor(editorRef.current, {
          includeUI: {
            loadImage: {
              path: imageURl,
              name: "SampleImage",
            },
            theme: myTheme,
            menu: [
              "crop",
              "flip",
              "rotate",
              "draw",
              "shape",
              "icon",
              "text",
              "mask",
              "filter",
            ],
            initMenu: "",
            uiSize: {
              height: `100vh`,
              width: "100%",
            },
            menuBarPosition: "top",
          },
          cssMaxHeight: 400,
          cssMaxWidth: 1000,
          selectionStyle: {
            cornerSize: 20,
            rotatingPointOffset: 70,
          },
          usageStatistics: false,
        });

        const checkImageLoaded = () => {
          if (
            editorInstanceRef.current &&
            editorInstanceRef.current._graphics &&
            editorInstanceRef.current
          ) {
            const canvasImage =
              editorInstanceRef.current._graphics.getCanvasImage();

            if (canvasImage) {
              setImageLoaded(true);
            }
          }
        };

        const imageLoadInterval = setInterval(checkImageLoaded, 500);

        return () => {
          clearInterval(imageLoadInterval);
        };
      }
    };

    const fetchData = async () => {
      try {
        let resp = await axios.get(`http://localhost:5000/image`);
        console.log(resp.data);
        setImages(resp.data);
      } catch (err) {
        console.error(err);
      }
    };
    fetchData();
    initializeEditor();

    return () => {
      editorInstanceRef.current?.destroy?.();
    };
  }, [imageURl]);

  useEffect(() => {
    if (imageLoaded && editorInstanceRef.current) {
      const downloadButton =
        editorInstanceRef.current?.ui?._buttonElements?.download[0];
      if (downloadButton) {
        downloadButton.addEventListener("click", () => {
          handleCustomDownload();
        });
      }
    }
  }, [imageLoaded]);

  const handleCustomDownload = () => {
    if (editorInstanceRef.current) {
      const dataURL = editorInstanceRef.current.toDataURL();
      const tmpLink = document.createElement("a");
      tmpLink.download = "";
      tmpLink.href = dataURL;
      document.body.appendChild(tmpLink);
      tmpLink.click();
      document.body.removeChild(tmpLink);
    }
  };
  const handleCustomSave = async () => {
    if (editorInstanceRef.current) {
      const dataURL = editorInstanceRef.current.toDataURL();
      const resizedDataURL = await resizeImage(dataURL, 200, 200);
      let data = {
        "name": "MD",
        "image": resizedDataURL
      };
      let resp = await axios.post(`http://localhost:5000/image/create`
        ,data
      );
      console.log(resp);

      // var image = new Image();
      // image.src = dataURL;
      // image.onload = function() {
      //     console.log(image)
      //     console.log("Image Width:", image.width);
      //     console.log("Image Height:", image.height);
      //     console.log("Image Format:", getImageFormat(image.src));
      //     console.log("Image Size (bytes):", getImageSize(image.src));
      // };
      // console.log(dataURL)
      setImageInfo(resizedDataURL);
    }
  };
  function getImageFormat(src: any) {
    var format = src.match(/^data:(image\/\w+);/)[1];
    return format;
  }
  const resizeImage = (dataURL:any, width:any, height:any) => {
    return new Promise((resolve) => {
      const img = new Image();
      img.src = dataURL;
      img.onload = () => {
        const canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        const ctx:any = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, width, height);
        resolve(canvas.toDataURL());
      };
    });
  };
  function getImageSize(src: any) {
    var binary = atob(src.split(",")[1]);
    var len = binary.length;
    var bytes = new Uint8Array(len);

    for (var i = 0; i < len; i++) {
      bytes[i] = binary.charCodeAt(i);
    }
    return bytes.length;
  }
const handleChangeImage =(image:any)=>{
  setImageURL(image)
}
  return (
    <div>
      {imageLoaded && (
        <button
          style={{
            // position: "fixed",
            bottom: "50px",
            right: "10px",
            backgroundColor: "#000",
            border: "1px solid #000",
            color: "#fff",
            fontFamily: "NotoSans, sans-serif",
            fontSize: "12px",
            padding: "10px 20px",
            cursor: "pointer",
          }}
          onClick={handleCustomSave}
        >
          Save Image
        </button>
      )}
      <div className="d-flex px-5 py-2">
        {imageList.map((e: any,index:any): any => (
          <p key={index} className="pe-2 fs-2" onClick={()=>handleChangeImage(e.image)}>{e.name}</p>
        ))}
      </div>
      <div ref={editorRef}></div>
      {imageInfo && (
        <div>
          <img src={imageInfo} alt="Edited" />
          <button onClick={() => setImageInfo(null)}>Close Image</button>
        </div>
      )}
    </div>
  );
};

export default TuiImageEditorComponent;




const handleCrop = (aspectRatio: string) => {
  const editorInstance = editorInstanceRef.current;
  if (!editorInstance) return;

  switch (aspectRatio) {
      case 'custom':
          editorInstance.startDrawingMode();
          break;
      case 'square':
          editorInstance.setCropzoneRect(1);
          break;
      case '3:2':
          editorInstance.crop({
              top: 0,
              left: 0,
              width: editorInstance.getCanvasSize().width,
              height: (editorInstance.getCanvasSize().width / 3) * 2,
          });
          break;
      case '4:3':
          editorInstance.crop({
              top: 0,
              left: 0,
              width: editorInstance.getCanvasSize().width,
              height: (editorInstance.getCanvasSize().width / 4) * 3,
          });
          break;
      case '5:4':
          editorInstance.crop({
              top: 0,
              left: 0,
              width: editorInstance.getCanvasSize().width,
              height: (editorInstance.getCanvasSize().width / 5) * 4,
          });
          break;
      case '7:5':
          editorInstance.crop({
              top: 0,
              left: 0,
              width: editorInstance.getCanvasSize().width,
              height: (editorInstance.getCanvasSize().width / 7) * 5,
          });
          break;
      case '16:9':
          editorInstance.crop({
              top: 0,
              left: 0,
              width: editorInstance.getCanvasSize().width,
              height: (editorInstance.getCanvasSize().width / 16) * 9,
          });
          break;
      default:
          break;
  }
};

const applyCrop = () => {
  const editorInstance = editorInstanceRef.current;
  if (!editorInstance) return;

  editorInstance.crop(editorInstance.getCropzoneRect());
  editorInstance.stopDrawingMode();
  setIsCropping(false);
};

const cancelCrop = () => {
  const editorInstance = editorInstanceRef.current;
  if (!editorInstance) return;

  editorInstance.stopDrawingMode();
  setIsCropping(false);
};

         <button
            className="btn active  "
            onClick={() => {
              setFlipShow(!flipshow);
              setRotateShow(false);
              setdrawShow(false);
              setShapeShow(false);
              setTextShow(false);
              SetZoomInValue(false);
              setShowMaskSubMeun(false);
              setShowIconMenu(false);
              setShowResizeSubMenu(false);
            }}
          >
            <FlipIcon fontSize="large" />
          </button>
          <button
            className="btn  "
            onClick={() => {
              setRotateShow(!rotateshow);
              setFlipShow(false);
              setdrawShow(false);
              setShapeShow(false);
              setTextShow(false);
              SetZoomInValue(false);
              setShowMaskSubMeun(false);
              setShowIconMenu(false);
              setShowResizeSubMenu(false);
            }}
          >
            <LoopIcon fontSize="large" />
          </button>
          <button
            className="btn  "
            onClick={() => {
              setdrawShow(!drawshow);
              setFlipShow(false);
              setRotateShow(false);
              setShapeShow(false);
              setTextShow(false);
              SetZoomInValue(false);
              setShowMaskSubMeun(false);
              setShowIconMenu(false);
              setShowResizeSubMenu(false);
            }}
          >
            <DrawIcon fontSize="large" />
          </button>
          <button
            className="btn  "
            onClick={() => {
              setShapeShow(!shapeshow);
              setdrawShow(false);
              setFlipShow(false);
              setRotateShow(false);
              setTextShow(false);
              SetZoomInValue(false);
              setShowMaskSubMeun(false);
              setShowIconMenu(false);
              setShowResizeSubMenu(false);
              handleClickShape("triangle", {
                fill,
                stroke,
                strokeWidth,
                rx: 10,
                ry: 1000,
              });
            }}
          >
            <ShapeLineSharpIcon fontSize="large" />
          </button>
          <button
            className="btn  "
            onClick={(e) => {
              setShapeShow(false);
              setdrawShow(false);
              setFlipShow(false);
              setRotateShow(false);
              SetZoomInValue(false);
              setShowMaskSubMeun(false);
              setShowIconMenu(false);
              setShowResizeSubMenu(false);
              setTextShow((prevTextShow) => !prevTextShow);
            }}
          >
            <FormatColorTextSharpIcon fontSize="large" />
          </button>

          <button className="btn  " onClick={handleUndo}>
            <UndoSharpIcon fontSize="large" />
          </button>
          <button className="btn  " onClick={handleRedo}>
            <RedoSharpIcon fontSize="large" />
          </button>

          <button className="btn  " onClick={handleRest}>
            <RestartAltSharpIcon fontSize="large" />
          </button>

          <button
            className="btn  "
            onClick={() => {
              setShowMaskSubMeun(false);
              setShowIconMenu(false);
              setShowResizeSubMenu(false);
              SetZoomInValue(!zoomInvalue);
              setShapeShow(false);
              setdrawShow(false);
              setFlipShow(false);
              setRotateShow(false);
              setTextShow(false);
            }}
          >
            <ZoomInSharpIcon fontSize="large" />
          </button>
          <button className="btn  " onClick={handleZoomOut}>
            <ZoomOutSharpIcon fontSize="large" />
          </button>
          <button className="btn  " onClick={handleDelete}>
            <DeleteSharpIcon fontSize="large" />
          </button>

          <button className="btn  " onClick={handleCrop}>
            <CropFreeSharpIcon fontSize="large" />
          </button>

          <button
            className="btn btn-primary m-1"
            onClick={() => {
              setShowMaskSubMeun(!showMaskSubMeun);
              setShowIconMenu(false);
              setShowResizeSubMenu(false);
              SetZoomInValue(false);
              setShapeShow(false);
              setdrawShow(false);
              setFlipShow(false);
              setRotateShow(false);
              setTextShow(false);
            }}
          >
            Mark
          </button>
          <button
            className="btn btn-primary m-1"
            onClick={() => {
              const canvasSize = editorInstanceRef.current.getCanvasSize();
              const canvasWidth = canvasSize.width;
              const canvasHeight = canvasSize.height;

              setCanvasWidth(canvasWidth);
              setCanvasHeight(canvasHeight);
              setShowIconMenu(false);
              setShowResizeSubMenu(!showResizeSubMenu);
              setShowMaskSubMeun(false);
              SetZoomInValue(false);
              setShapeShow(false);
              setdrawShow(false);
              setFlipShow(false);
              setRotateShow(false);
              setTextShow(false);
            }}
          >
            Resize
          </button>

          <button
            className="btn btn-primary m-1"
            onClick={() => {
              setShowIconMenu(!showIconSubMenu);
              setShowResizeSubMenu(false);
              setShowMaskSubMeun(false);
              SetZoomInValue(false);
              setShapeShow(false);
              setdrawShow(false);
              setFlipShow(false);
              setRotateShow(false);
              setTextShow(false);
            }}
          >
            icon
          </button>

          <button
            className="btn btn-primary m-1"
            onClick={() => {
              setShowIconMenu(false);
              setshowFilterSubMenu(!showFilterSubMenu);
              setShowResizeSubMenu(false);
              setShowMaskSubMeun(false);
              SetZoomInValue(false);
              setShapeShow(false);
              setdrawShow(false);
              setFlipShow(false);
              setRotateShow(false);
              setTextShow(false);
            }}
          >
            Filter
          </button>
        </div>